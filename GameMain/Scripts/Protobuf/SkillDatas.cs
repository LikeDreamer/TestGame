// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SkillDatas.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AltarOfSword {

  /// <summary>Holder for reflection information generated from SkillDatas.proto</summary>
  public static partial class SkillDatasReflection {

    #region Descriptor
    /// <summary>File descriptor for SkillDatas.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SkillDatasReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTa2lsbERhdGFzLnByb3RvEgxBbHRhck9mU3dvcmQiaAoOQWN0b3JTa2ls",
            "bERhdGESKQoJc2tpbGxNYXBzGAEgAygLMhYuQWx0YXJPZlN3b3JkLlNraWxs",
            "TWFwEisKCnNraWxsRGF0YXMYAiADKAsyFy5BbHRhck9mU3dvcmQuU2tpbGxE",
            "YXRhIkwKCFNraWxsTWFwEg0KBW1hcElEGAEgASgFEjEKDXNraWxsTWFwSXRl",
            "bXMYAiADKAsyGi5BbHRhck9mU3dvcmQuU2tpbGxNYXBJdGVtIjEKDFNraWxs",
            "TWFwSXRlbRIPCgdncm91cElEGAEgASgFEhAKCHNraWxsSURzGAIgAygFIsEB",
            "CglTa2lsbERhdGESDwoHc2tpbGxJRBgBIAEoBRI/Cgxza2lsbENvbmZpZ3MY",
            "AiADKAsyKS5BbHRhck9mU3dvcmQuU2tpbGxEYXRhLlNraWxsQ29uZmlnc0Vu",
            "dHJ5Ei0KC3NraWxsRnJhbWVzGAMgAygLMhguQWx0YXJPZlN3b3JkLlNraWxs",
            "RnJhbWUaMwoRU2tpbGxDb25maWdzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
            "bHVlGAIgASgFOgI4ASJVCgpTa2lsbEZyYW1lEhAKCHN0YXJ0TnVtGAEgASgF",
            "EjUKD3NraWxsRnJhbWVJdGVtcxgCIAMoCzIcLkFsdGFyT2ZTd29yZC5Ta2ls",
            "bEZyYW1lSXRlbSLSAQoOU2tpbGxGcmFtZUl0ZW0SEAoIZHVyYXRpb24YASAB",
            "KAUSDgoGbnVtYmVyGAIgASgFEhEKCWlzUmV2ZXJzZRgDIAEoCBIqCgpjb25k",
            "aXRpb25zGAQgAygLMhYuQWx0YXJPZlN3b3JkLkRhdGFVbml0Ei4KDnRydWVC",
            "ZWhhdmlvdXJzGAUgAygLMhYuQWx0YXJPZlN3b3JkLkRhdGFVbml0Ei8KD2Zh",
            "bHNlQmVoYXZpb3VycxgGIAMoCzIWLkFsdGFyT2ZTd29yZC5EYXRhVW5pdCI8",
            "CghEYXRhVW5pdBIMCgR0eXBlGAEgASgFEhEKCWlzUmV2ZXJzZRgCIAEoCBIP",
            "CgdkYXRhc2V0GAMgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AltarOfSword.ActorSkillData), global::AltarOfSword.ActorSkillData.Parser, new[]{ "SkillMaps", "SkillDatas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AltarOfSword.SkillMap), global::AltarOfSword.SkillMap.Parser, new[]{ "MapID", "SkillMapItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AltarOfSword.SkillMapItem), global::AltarOfSword.SkillMapItem.Parser, new[]{ "GroupID", "SkillIDs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AltarOfSword.SkillData), global::AltarOfSword.SkillData.Parser, new[]{ "SkillID", "SkillConfigs", "SkillFrames" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AltarOfSword.SkillFrame), global::AltarOfSword.SkillFrame.Parser, new[]{ "StartNum", "SkillFrameItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AltarOfSword.SkillFrameItem), global::AltarOfSword.SkillFrameItem.Parser, new[]{ "Duration", "Number", "IsReverse", "Conditions", "TrueBehaviours", "FalseBehaviours" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AltarOfSword.DataUnit), global::AltarOfSword.DataUnit.Parser, new[]{ "Type", "IsReverse", "Dataset" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActorSkillData : pb::IMessage<ActorSkillData> {
    private static readonly pb::MessageParser<ActorSkillData> _parser = new pb::MessageParser<ActorSkillData>(() => new ActorSkillData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorSkillData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AltarOfSword.SkillDatasReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorSkillData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorSkillData(ActorSkillData other) : this() {
      skillMaps_ = other.skillMaps_.Clone();
      skillDatas_ = other.skillDatas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorSkillData Clone() {
      return new ActorSkillData(this);
    }

    /// <summary>Field number for the "skillMaps" field.</summary>
    public const int SkillMapsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AltarOfSword.SkillMap> _repeated_skillMaps_codec
        = pb::FieldCodec.ForMessage(10, global::AltarOfSword.SkillMap.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.SkillMap> skillMaps_ = new pbc::RepeatedField<global::AltarOfSword.SkillMap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.SkillMap> SkillMaps {
      get { return skillMaps_; }
    }

    /// <summary>Field number for the "skillDatas" field.</summary>
    public const int SkillDatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AltarOfSword.SkillData> _repeated_skillDatas_codec
        = pb::FieldCodec.ForMessage(18, global::AltarOfSword.SkillData.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.SkillData> skillDatas_ = new pbc::RepeatedField<global::AltarOfSword.SkillData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.SkillData> SkillDatas {
      get { return skillDatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorSkillData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorSkillData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!skillMaps_.Equals(other.skillMaps_)) return false;
      if(!skillDatas_.Equals(other.skillDatas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= skillMaps_.GetHashCode();
      hash ^= skillDatas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillMaps_.WriteTo(output, _repeated_skillMaps_codec);
      skillDatas_.WriteTo(output, _repeated_skillDatas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillMaps_.CalculateSize(_repeated_skillMaps_codec);
      size += skillDatas_.CalculateSize(_repeated_skillDatas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorSkillData other) {
      if (other == null) {
        return;
      }
      skillMaps_.Add(other.skillMaps_);
      skillDatas_.Add(other.skillDatas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            skillMaps_.AddEntriesFrom(input, _repeated_skillMaps_codec);
            break;
          }
          case 18: {
            skillDatas_.AddEntriesFrom(input, _repeated_skillDatas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillMap : pb::IMessage<SkillMap> {
    private static readonly pb::MessageParser<SkillMap> _parser = new pb::MessageParser<SkillMap>(() => new SkillMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AltarOfSword.SkillDatasReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillMap(SkillMap other) : this() {
      mapID_ = other.mapID_;
      skillMapItems_ = other.skillMapItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillMap Clone() {
      return new SkillMap(this);
    }

    /// <summary>Field number for the "mapID" field.</summary>
    public const int MapIDFieldNumber = 1;
    private int mapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "skillMapItems" field.</summary>
    public const int SkillMapItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AltarOfSword.SkillMapItem> _repeated_skillMapItems_codec
        = pb::FieldCodec.ForMessage(18, global::AltarOfSword.SkillMapItem.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.SkillMapItem> skillMapItems_ = new pbc::RepeatedField<global::AltarOfSword.SkillMapItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.SkillMapItem> SkillMapItems {
      get { return skillMapItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapID != other.MapID) return false;
      if(!skillMapItems_.Equals(other.skillMapItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapID != 0) hash ^= MapID.GetHashCode();
      hash ^= skillMapItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapID);
      }
      skillMapItems_.WriteTo(output, _repeated_skillMapItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      size += skillMapItems_.CalculateSize(_repeated_skillMapItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillMap other) {
      if (other == null) {
        return;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      skillMapItems_.Add(other.skillMapItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapID = input.ReadInt32();
            break;
          }
          case 18: {
            skillMapItems_.AddEntriesFrom(input, _repeated_skillMapItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillMapItem : pb::IMessage<SkillMapItem> {
    private static readonly pb::MessageParser<SkillMapItem> _parser = new pb::MessageParser<SkillMapItem>(() => new SkillMapItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillMapItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AltarOfSword.SkillDatasReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillMapItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillMapItem(SkillMapItem other) : this() {
      groupID_ = other.groupID_;
      skillIDs_ = other.skillIDs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillMapItem Clone() {
      return new SkillMapItem(this);
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 1;
    private int groupID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    /// <summary>Field number for the "skillIDs" field.</summary>
    public const int SkillIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_skillIDs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> skillIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SkillIDs {
      get { return skillIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillMapItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillMapItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupID != other.GroupID) return false;
      if(!skillIDs_.Equals(other.skillIDs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupID != 0) hash ^= GroupID.GetHashCode();
      hash ^= skillIDs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GroupID);
      }
      skillIDs_.WriteTo(output, _repeated_skillIDs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupID);
      }
      size += skillIDs_.CalculateSize(_repeated_skillIDs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillMapItem other) {
      if (other == null) {
        return;
      }
      if (other.GroupID != 0) {
        GroupID = other.GroupID;
      }
      skillIDs_.Add(other.skillIDs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            skillIDs_.AddEntriesFrom(input, _repeated_skillIDs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillData : pb::IMessage<SkillData> {
    private static readonly pb::MessageParser<SkillData> _parser = new pb::MessageParser<SkillData>(() => new SkillData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AltarOfSword.SkillDatasReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData(SkillData other) : this() {
      skillID_ = other.skillID_;
      skillConfigs_ = other.skillConfigs_.Clone();
      skillFrames_ = other.skillFrames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData Clone() {
      return new SkillData(this);
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 1;
    private int skillID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "skillConfigs" field.</summary>
    public const int SkillConfigsFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_skillConfigs_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> skillConfigs_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> SkillConfigs {
      get { return skillConfigs_; }
    }

    /// <summary>Field number for the "skillFrames" field.</summary>
    public const int SkillFramesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AltarOfSword.SkillFrame> _repeated_skillFrames_codec
        = pb::FieldCodec.ForMessage(26, global::AltarOfSword.SkillFrame.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.SkillFrame> skillFrames_ = new pbc::RepeatedField<global::AltarOfSword.SkillFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.SkillFrame> SkillFrames {
      get { return skillFrames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillID != other.SkillID) return false;
      if (!SkillConfigs.Equals(other.SkillConfigs)) return false;
      if(!skillFrames_.Equals(other.skillFrames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      hash ^= SkillConfigs.GetHashCode();
      hash ^= skillFrames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillID);
      }
      skillConfigs_.WriteTo(output, _map_skillConfigs_codec);
      skillFrames_.WriteTo(output, _repeated_skillFrames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      size += skillConfigs_.CalculateSize(_map_skillConfigs_codec);
      size += skillFrames_.CalculateSize(_repeated_skillFrames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillData other) {
      if (other == null) {
        return;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      skillConfigs_.Add(other.skillConfigs_);
      skillFrames_.Add(other.skillFrames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillID = input.ReadInt32();
            break;
          }
          case 18: {
            skillConfigs_.AddEntriesFrom(input, _map_skillConfigs_codec);
            break;
          }
          case 26: {
            skillFrames_.AddEntriesFrom(input, _repeated_skillFrames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillFrame : pb::IMessage<SkillFrame> {
    private static readonly pb::MessageParser<SkillFrame> _parser = new pb::MessageParser<SkillFrame>(() => new SkillFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AltarOfSword.SkillDatasReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillFrame(SkillFrame other) : this() {
      startNum_ = other.startNum_;
      skillFrameItems_ = other.skillFrameItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillFrame Clone() {
      return new SkillFrame(this);
    }

    /// <summary>Field number for the "startNum" field.</summary>
    public const int StartNumFieldNumber = 1;
    private int startNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartNum {
      get { return startNum_; }
      set {
        startNum_ = value;
      }
    }

    /// <summary>Field number for the "skillFrameItems" field.</summary>
    public const int SkillFrameItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AltarOfSword.SkillFrameItem> _repeated_skillFrameItems_codec
        = pb::FieldCodec.ForMessage(18, global::AltarOfSword.SkillFrameItem.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.SkillFrameItem> skillFrameItems_ = new pbc::RepeatedField<global::AltarOfSword.SkillFrameItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.SkillFrameItem> SkillFrameItems {
      get { return skillFrameItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartNum != other.StartNum) return false;
      if(!skillFrameItems_.Equals(other.skillFrameItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartNum != 0) hash ^= StartNum.GetHashCode();
      hash ^= skillFrameItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartNum);
      }
      skillFrameItems_.WriteTo(output, _repeated_skillFrameItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartNum);
      }
      size += skillFrameItems_.CalculateSize(_repeated_skillFrameItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillFrame other) {
      if (other == null) {
        return;
      }
      if (other.StartNum != 0) {
        StartNum = other.StartNum;
      }
      skillFrameItems_.Add(other.skillFrameItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartNum = input.ReadInt32();
            break;
          }
          case 18: {
            skillFrameItems_.AddEntriesFrom(input, _repeated_skillFrameItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillFrameItem : pb::IMessage<SkillFrameItem> {
    private static readonly pb::MessageParser<SkillFrameItem> _parser = new pb::MessageParser<SkillFrameItem>(() => new SkillFrameItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillFrameItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AltarOfSword.SkillDatasReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillFrameItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillFrameItem(SkillFrameItem other) : this() {
      duration_ = other.duration_;
      number_ = other.number_;
      isReverse_ = other.isReverse_;
      conditions_ = other.conditions_.Clone();
      trueBehaviours_ = other.trueBehaviours_.Clone();
      falseBehaviours_ = other.falseBehaviours_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillFrameItem Clone() {
      return new SkillFrameItem(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "isReverse" field.</summary>
    public const int IsReverseFieldNumber = 3;
    private bool isReverse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReverse {
      get { return isReverse_; }
      set {
        isReverse_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AltarOfSword.DataUnit> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(34, global::AltarOfSword.DataUnit.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.DataUnit> conditions_ = new pbc::RepeatedField<global::AltarOfSword.DataUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.DataUnit> Conditions {
      get { return conditions_; }
    }

    /// <summary>Field number for the "trueBehaviours" field.</summary>
    public const int TrueBehavioursFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AltarOfSword.DataUnit> _repeated_trueBehaviours_codec
        = pb::FieldCodec.ForMessage(42, global::AltarOfSword.DataUnit.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.DataUnit> trueBehaviours_ = new pbc::RepeatedField<global::AltarOfSword.DataUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.DataUnit> TrueBehaviours {
      get { return trueBehaviours_; }
    }

    /// <summary>Field number for the "falseBehaviours" field.</summary>
    public const int FalseBehavioursFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AltarOfSword.DataUnit> _repeated_falseBehaviours_codec
        = pb::FieldCodec.ForMessage(50, global::AltarOfSword.DataUnit.Parser);
    private readonly pbc::RepeatedField<global::AltarOfSword.DataUnit> falseBehaviours_ = new pbc::RepeatedField<global::AltarOfSword.DataUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AltarOfSword.DataUnit> FalseBehaviours {
      get { return falseBehaviours_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillFrameItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillFrameItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Duration != other.Duration) return false;
      if (Number != other.Number) return false;
      if (IsReverse != other.IsReverse) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      if(!trueBehaviours_.Equals(other.trueBehaviours_)) return false;
      if(!falseBehaviours_.Equals(other.falseBehaviours_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (IsReverse != false) hash ^= IsReverse.GetHashCode();
      hash ^= conditions_.GetHashCode();
      hash ^= trueBehaviours_.GetHashCode();
      hash ^= falseBehaviours_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Duration != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Duration);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (IsReverse != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReverse);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      trueBehaviours_.WriteTo(output, _repeated_trueBehaviours_codec);
      falseBehaviours_.WriteTo(output, _repeated_falseBehaviours_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (IsReverse != false) {
        size += 1 + 1;
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      size += trueBehaviours_.CalculateSize(_repeated_trueBehaviours_codec);
      size += falseBehaviours_.CalculateSize(_repeated_falseBehaviours_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillFrameItem other) {
      if (other == null) {
        return;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.IsReverse != false) {
        IsReverse = other.IsReverse;
      }
      conditions_.Add(other.conditions_);
      trueBehaviours_.Add(other.trueBehaviours_);
      falseBehaviours_.Add(other.falseBehaviours_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Duration = input.ReadInt32();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 24: {
            IsReverse = input.ReadBool();
            break;
          }
          case 34: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
          case 42: {
            trueBehaviours_.AddEntriesFrom(input, _repeated_trueBehaviours_codec);
            break;
          }
          case 50: {
            falseBehaviours_.AddEntriesFrom(input, _repeated_falseBehaviours_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataUnit : pb::IMessage<DataUnit> {
    private static readonly pb::MessageParser<DataUnit> _parser = new pb::MessageParser<DataUnit>(() => new DataUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AltarOfSword.SkillDatasReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataUnit(DataUnit other) : this() {
      type_ = other.type_;
      isReverse_ = other.isReverse_;
      dataset_ = other.dataset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataUnit Clone() {
      return new DataUnit(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "isReverse" field.</summary>
    public const int IsReverseFieldNumber = 2;
    private bool isReverse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReverse {
      get { return isReverse_; }
      set {
        isReverse_ = value;
      }
    }

    /// <summary>Field number for the "dataset" field.</summary>
    public const int DatasetFieldNumber = 3;
    private pb::ByteString dataset_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dataset {
      get { return dataset_; }
      set {
        dataset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (IsReverse != other.IsReverse) return false;
      if (Dataset != other.Dataset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsReverse != false) hash ^= IsReverse.GetHashCode();
      if (Dataset.Length != 0) hash ^= Dataset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (IsReverse != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReverse);
      }
      if (Dataset.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Dataset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (IsReverse != false) {
        size += 1 + 1;
      }
      if (Dataset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dataset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataUnit other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsReverse != false) {
        IsReverse = other.IsReverse;
      }
      if (other.Dataset.Length != 0) {
        Dataset = other.Dataset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            IsReverse = input.ReadBool();
            break;
          }
          case 26: {
            Dataset = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
